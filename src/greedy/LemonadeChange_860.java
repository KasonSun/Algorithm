package greedy;

/**
 * 在柠檬水摊上，每一杯柠檬水的售价为5美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。
 * 每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。
 * 注意，一开始你手头没有任何零钱。
 * 给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回true，否则返回 false。
 *
 * 输入：bills = [5,5,5,10,20]
 * 输出：true
 * 解释：
 * 前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
 * 第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
 * 第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
 * 由于所有客户都得到了正确的找零，所以我们输出 true。

 * 输入：bills = [5,5,10,10,20]
 * 输出：false
 * 解释：
 * 前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。
 * 对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。
 * 对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。
 * 由于不是每位顾客都得到了正确的找零，所以答案是 false。
 *
 * 输入：bills = [5,5,10]
 * 输出：true
 *
 * 输入：bills = [10,10]
 * 输出：false
 *
 */
public class LemonadeChange_860 {
    public static void main(String[] args) {

    }

    /**
     * 贪心法：
     *      思路：我们只需要维护三种金额的数量。
     *              ①账单是5，直接收下
     *              ②账单是10，消耗一个5，增加一个10
     *              ③账单是20，优先消耗一个10和一个5，增加一个20 或者消耗三个5，增加一个20
     *            此时可以发现，以上情况都是固定的策略，贪心策略实际上只在③ 中有，优先消耗就是贪心，局部最优，完成本次交易，全局最优，完成所有交易
     *            因为美元10只能给账单20找零，而美元5可以给账单10和账单20找零，美元5更万能！
     * @param bills
     * @return
     */
    public static boolean lemonadeChange(int[] bills) {
        int five = 0, ten = 0, twenty = 0;
        for (int bill : bills) {
            //①账单是5，直接收下
            if (bill == 5) {
                five++;
            }

            //②账单是10，消耗一个5，增加一个10
            if (bill == 10) {
                if (five <= 0) {
                    return false;
                }
                ten++;
                five--;
            }

            //③账单是20，优先消耗一个10和一个5，增加一个20 或者消耗三个5，增加一个20
            if (bill == 20) {
                //优先消耗10,5有更大用处
                if (five > 0 && ten > 0) {
                    ten--;
                    five--;
                    twenty++;//这个其实可以不写，因为20不能用来找零
                } else if (five >= 3) {
                    five -= 3;
                    twenty++;//同理可不写
                }else{
                    return false;
                }
            }
        }
        return true;
    }
}
